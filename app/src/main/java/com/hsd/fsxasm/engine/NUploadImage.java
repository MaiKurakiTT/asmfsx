package com.hsd.fsxasm.engine;import java.io.File;import java.util.ArrayList;import java.util.List;import org.xutils.DbManager;import org.xutils.x;import org.xutils.ex.DbException;import org.xutils.http.RequestParams;import android.app.Activity;import android.os.Handler;import android.os.Message;import com.alibaba.fastjson.JSONObject;import com.hsd.fsxasm.base.BaseCommonCallback;import com.hsd.fsxasm.base.BaseEngine;import com.hsd.fsxasm.db.MDbString;import com.hsd.fsxasm.db.MDbUser;import com.hsd.fsxasm.db.MDbUtils;import com.hsd.fsxasm.domain.BaseBean;import com.hsd.fsxasm.domain.LoginBean;import com.hsd.fsxasm.domain.UserInformationBean;import com.hsd.fsxasm.global.Constructs;import com.hsd.fsxasm.global.Global;import com.hsd.fsxasm.global.SharedPreferencesString;import com.hsd.fsxasm.utils.LogUtil;public class NUploadImage extends BaseEngine{		private String TAG = "NUploadImage"; 		public NUploadImage(Activity mActivity, Handler handler) {		super(mActivity, handler);		// TODO Auto-generated constructor stub	}		public void uploadImage(String path){		RequestParams params = new RequestParams(Global.UPDATE_IMAGE);		File file = new File(path);				params.addBodyParameter(	                "file",	                file,	                null); // 如果文件没有扩展名, 最好设置contentType参数.			BaseCommonCallback<String> baseCommonCallback = new BaseCommonCallback<String>(mHandler){			@Override			public void onSuccess(String result) {				// TODO Auto-generated method stub				Message msg = new Message();				msg.what = Constructs.NET_SUCCESSFUL;				msg.obj = result;				mHandler.sendMessage(msg);			}		};				x.http().post(params, baseCommonCallback);	}		public void uploadImageAndUpDateUserInfo(String path, UserInformationBean userInformationBean, Activity activity, Handler handler){		final Handler handler2 = handler;		final UserInformationBean userInformationBean2 = userInformationBean;		RequestParams params = new RequestParams(Global.UPDATE_IMAGE);		File file = new File(path);		if(file.exists()){			params.addBodyParameter(	                "file",	                file,	                null); // 如果文件没有扩展名, 最好设置contentType参数.			BaseCommonCallback<String> baseCommonCallback = new BaseCommonCallback<String>(mHandler){			@Override			public void onSuccess(String result) {								BaseBean base = JSONObject.parseObject(result, BaseBean.class);				String imgUrl = base.getBody();				/**				 * 更新本地数据库中头像的URL				 */				DbManager db = x.getDb(MDbUtils.daoConfig);				MDbUser mDbUser = new MDbUser();				try {					mDbUser.setId(1);					mDbUser.setHead_url(imgUrl);					db.update(mDbUser, MDbString.head_url);					//db.update(MDbUser.class, MDbString.head_url, imgUrl);				} catch (DbException e) {					e.printStackTrace();				}				userInformationBean2.setUser_icon(imgUrl);				System.out.println(userInformationBean2.getUUID()+"===============uuid");;				NUpDateUserInfo nUpDateUserInfo = new NUpDateUserInfo(mActivity, handler2);				nUpDateUserInfo.UpDateUserInfo(userInformationBean2);			}		};				x.http().post(params, baseCommonCallback);		}	}			private List<String> imagesURL;	/**	 * 上传多张图片到服务器,最后会通过handler发送的到对应activity的updataUI方法	 * @param images	 */	public void uploadImage(final List<String> images){		imagesURL = new ArrayList<String>();		int j = 0;		for(int i = 0;i<images.size();i++){			RequestParams params = new RequestParams(Global.UPDATE_IMAGE);			File file = new File(images.get(i));			params.addBodyParameter(	                "file",	                file,	                null); // 如果文件没有扩展名, 最好设置contentType参数.					BaseCommonCallback<String> baseCommonCallback = new BaseCommonCallback<String>(mHandler){								@Override				public void onSuccess(String result) {					// TODO Auto-generated method stub					LogUtil.info(TAG, "上传图片成功!");					BaseBean base = JSONObject.parseObject(result, BaseBean.class);					String imgUrl = base.getBody();					imagesURL.add(imgUrl);					//如果上传的图片url长度等于了待上传的长度,需要将该list发送回uidataui					if(imagesURL.size() == images.size()){						Message msg = new Message();						msg.what = Constructs.NET_SUCCESSFUL;						msg.obj = imagesURL;						mHandler.sendMessage(msg);					}				}			};			x.http().post(params, baseCommonCallback);		}				}						}
package com.hsd.fsxasm.engine;import java.io.IOException;import org.xutils.DbManager;import org.xutils.x;import org.xutils.common.Callback;import org.xutils.common.Callback.CancelledException;import org.xutils.common.Callback.CommonCallback;import org.xutils.ex.DbException;import org.xutils.http.RequestParams;import android.app.Activity;import android.content.Context;import android.os.Handler;import android.os.Message;import android.widget.Toast;import com.hsd.fsxasm.base.BaseCommonCallback;import com.hsd.fsxasm.base.BaseEngine;import com.hsd.fsxasm.db.MDbString;import com.hsd.fsxasm.db.MDbUser;import com.hsd.fsxasm.db.MDbUtils;import com.hsd.fsxasm.domain.LoginBean;import com.hsd.fsxasm.domain.UserInformationBean;import com.hsd.fsxasm.global.Constructs;import com.hsd.fsxasm.global.Global;import com.hsd.fsxasm.params.LoginParams;import com.hsd.fsxasm.utils.LogUtil;public class NLogin extends BaseEngine{					public NLogin(Activity mActivity, Handler handler) {		super(mActivity, handler);		// TODO Auto-generated constructor stub	}	public void login(String username,String pwd){		LoginParams params = new LoginParams(username,pwd);		if(!checkNet()){			return;		}else{			BaseCommonCallback<LoginBean> baseCommonCallback = new BaseCommonCallback<LoginBean>(mHandler){				@Override				public void onSuccess(LoginBean login) {					// TODO Auto-generated method stub										if(login!=null){						MDbUser mDbUser = new MDbUser();						MDbUtils.userInformationBean2MDbUser(login, mDbUser);						DbManager db = x.getDb(MDbUtils.daoConfig);						try {							db.save(mDbUser);							db.close();						} catch (DbException e) {							e.printStackTrace();						} catch (IOException e) {							// TODO Auto-generated catch block							e.printStackTrace();						}					}					Message msg = new Message();					msg.what = Constructs.NET_SUCCESSFUL;					msg.obj = login;					mHandler.sendMessage(msg);					dialog.dismiss();				}			};			dialog.show();			x.http().post(params, baseCommonCallback);		}	}		public void login(String uuid){		LoginParams params = new LoginParams(uuid);		if(!checkNet()){			return;		}else{			BaseCommonCallback<LoginBean> baseCommonCallback = new BaseCommonCallback<LoginBean>(mHandler){				@Override				public void onSuccess(LoginBean login) {					// TODO Auto-generated method stub										if(login!=null){						UserInformationBean userInformation = login.getUserInformation();						MDbUser mDbUser = new MDbUser();						MDbUtils.userInformationBean2MDbUser(userInformation,mDbUser,login.getUser_uuid());						DbManager db = x.getDb(MDbUtils.daoConfig);						try {							db.save(mDbUser);							db.close();						} catch (DbException e) {							e.printStackTrace();						} catch (IOException e) {							// TODO Auto-generated catch block							e.printStackTrace();						}					}					Message msg = new Message();					msg.what = Constructs.NET_SUCCESSFUL;					msg.obj = login;										mHandler.sendMessage(msg);				}			};			x.http().post(params, baseCommonCallback);		}	}}
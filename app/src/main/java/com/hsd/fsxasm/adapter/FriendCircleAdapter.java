package com.hsd.fsxasm.adapter;import java.util.ArrayList;import java.util.Date;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.TreeMap;import org.xutils.x;import org.xutils.common.Callback.CancelledException;import org.xutils.common.Callback.CommonCallback;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.os.AsyncTask;import android.os.Handler;import android.os.Message;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.View.OnClickListener;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.TextView;import com.alibaba.fastjson.JSONObject;import com.hsd.fsxasm.R;import com.hsd.fsxasm.activity.BigImageActivity;import com.hsd.fsxasm.domain.FriendCircleBean;import com.hsd.fsxasm.domain.PictureBean;import com.hsd.fsxasm.engine.NGood;import com.hsd.fsxasm.engine.NSendComment;import com.hsd.fsxasm.global.Constructs;import com.hsd.fsxasm.global.TempInfo;import com.hsd.fsxasm.inter.OnClickSignPopListener;import com.hsd.fsxasm.params.SendCommentParams;import com.hsd.fsxasm.utils.AsyncImageLoader;import com.hsd.fsxasm.utils.LogUtil;import com.hsd.fsxasm.widget.SignPopupWindow;import com.nostra13.universalimageloader.core.ImageLoader;public class FriendCircleAdapter extends BaseAdapter{	private List<FriendCircleBean> responseFriendCircleBeans;		private Activity mActivity;		private ImageLoader imageLoader;		private SignPopupWindow signPopupWindow;		private Map<Integer,Boolean> map ;			public FriendCircleAdapter(Activity activity ,List<FriendCircleBean> beans) {		super();		this.responseFriendCircleBeans = beans;		mActivity = activity;		imageLoader = AsyncImageLoader.getInstance().getImageLoaderInstance(mActivity);		map = new TreeMap<Integer, Boolean>();		signPopupWindow = new SignPopupWindow(mActivity);	}	@Override	public int getCount() {		// TODO Auto-generated method stub		//System.out.println(responseFriendCircleBeans);		if(responseFriendCircleBeans==null || responseFriendCircleBeans.size()==0){			return 0;		}		return responseFriendCircleBeans.size();	}	@Override	public Object getItem(int position) {		// TODO Auto-generated method stub		return position;	}	@Override	public long getItemId(int position) {		// TODO Auto-generated method stub		return position;	}		private String getTimeString(Date date) {		// TODO Auto-generated method stub		String showTime = "";		//SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");				int year = date.getYear();		int day = date.getDay();		int mouth = date.getMonth();		int hour = date.getHours();		int mint = date.getMinutes();		int second = date.getSeconds();				Date currentDate = new Date();		int currentYear = currentDate.getYear();		int currentDay = currentDate.getDay();		int currentMouth = currentDate.getMonth();		int currentHour = currentDate.getHours();		int currentMint = currentDate.getMinutes();		int currentSecond = currentDate.getSeconds();		if(year == currentYear){			if(mouth==currentMouth){				if(day == currentDay){					if(hour == currentHour){						if(mint == currentMint){							if(second == currentSecond){								showTime+= "刚刚";							}else{								showTime+= Math.abs((currentSecond-second))+"秒前";							}						}else{							showTime+= Math.abs((currentMint-mint))+"分钟前";						}					}else{						showTime+= Math.abs((currentHour-hour))+"小时前";					}				}else{					showTime+= Math.abs((currentDay-day))+"天前";				}			}else{				showTime+= Math.abs((currentMouth-mouth))+"个月前";			}		}				return showTime;	}		private void openVisible(int size, int position, Holder holder) {							// TODO Auto-generated method stub		System.out.println("size = " + size);		holder.bodyImage1.setVisibility(View.GONE);		holder.bodyImage2.setVisibility(View.GONE);		holder.bodyImage3.setVisibility(View.GONE);		holder.bodyImage4.setVisibility(View.GONE);		switch (size) {		case 1:			String s = responseFriendCircleBeans.get(position)					.getPictures().iterator().next()					.getPicture_URL();			holder.bodyImage1.setVisibility(View.VISIBLE);			holder.bodyImage1.setTag(s);			imageLoader.displayImage(s, holder.bodyImage1);			break;		case 2:			List<PictureBean> bean = responseFriendCircleBeans					.get(position).getPictures();			Iterator<PictureBean> iter = bean.iterator();			holder.bodyImage1.setVisibility(View.VISIBLE);			holder.bodyImage2.setVisibility(View.VISIBLE);			String url21 = iter.next().getPicture_URL();			String url22 = iter.next().getPicture_URL();			imageLoader.displayImage(url21, holder.bodyImage1);			imageLoader.displayImage(url22, holder.bodyImage1);			holder.bodyImage1.setTag(url21);			holder.bodyImage2.setTag(url22);			break;		case 3:			List<PictureBean> bean2 = responseFriendCircleBeans.get(					position).getPictures();			Iterator<PictureBean> iter2 = bean2.iterator();			String url31 = iter2.next().getPicture_URL();			String url32 = iter2.next().getPicture_URL();			String url33 = iter2.next().getPicture_URL();			System.out.println("3张图片的url---" + url31 + "-------" + url32					+ "-------" + url33);			holder.bodyImage1.setVisibility(View.VISIBLE);			imageLoader.displayImage(url31, holder.bodyImage1);			holder.bodyImage2.setVisibility(View.VISIBLE);			imageLoader.displayImage(url32, holder.bodyImage2);			holder.bodyImage3.setVisibility(View.VISIBLE);			imageLoader.displayImage(url33, holder.bodyImage3);						holder.bodyImage1.setTag(url31);			holder.bodyImage2.setTag(url32);			holder.bodyImage3.setTag(url33);			break;		case 4:			List<PictureBean> bean3 = responseFriendCircleBeans.get(					position).getPictures();			Iterator<PictureBean> iter3 = bean3.iterator();			String url41 = iter3.next().getPicture_URL();			String url42 = iter3.next().getPicture_URL();			String url43 = iter3.next().getPicture_URL();			String url44 = iter3.next().getPicture_URL();			System.out.println("4张图片的url---" + url41 + "-------" + url42					+ "-------" + url43 + "---------" + url44);			holder.bodyImage1.setVisibility(View.VISIBLE);			imageLoader.displayImage(url41, holder.bodyImage1);												holder.bodyImage2.setVisibility(View.VISIBLE);			imageLoader.displayImage(url42, holder.bodyImage2);			holder.bodyImage3.setVisibility(View.VISIBLE);			imageLoader.displayImage(url43, holder.bodyImage3);			holder.bodyImage4.setVisibility(View.VISIBLE);			imageLoader.displayImage(url44, holder.bodyImage4);			holder.bodyImage3.setTag(url41);			holder.bodyImage3.setTag(url42);			holder.bodyImage3.setTag(url43);			holder.bodyImage3.setTag(url44);			break;		default:			holder.bodyImage1.setVisibility(View.GONE);			holder.bodyImage2.setVisibility(View.GONE);			holder.bodyImage3.setVisibility(View.GONE);			holder.bodyImage4.setVisibility(View.GONE);		}	}		@Override	public View getView(final int position, View convertView, ViewGroup parent) {		// TODO Auto-generated method stub				final Holder holder;		if(convertView==null){			holder = new Holder();			convertView = View.inflate(mActivity, R.layout.new_home_page_item, null);			holder.headImage = (ImageView) convertView.findViewById(R.id.head_image);			System.out.println(holder.headImage==null);			holder.name = ((TextView) convertView					.findViewById(R.id.home_page_item_name));			holder.content = ((TextView) convertView					.findViewById(R.id.home_page_item_content));			holder.bodyImage1 = ((ImageView) convertView					.findViewById(R.id.friends_image1));			holder.bodyImage2 = ((ImageView) convertView					.findViewById(R.id.friends_image2));			holder.bodyImage3 = ((ImageView) convertView					.findViewById(R.id.friends_image3));			holder.bodyImage4 = ((ImageView) convertView					.findViewById(R.id.friends_image4));			holder.time = (TextView) convertView					.findViewById(R.id.home_page_item_time);			holder.good = (ImageView) convertView.findViewById(R.id.home_page_item_good);			holder.message = (ImageView) convertView.findViewById(R.id.home_page_item_comment);			//holder.listView = (ListView) convertView.findViewById(R.id.pl);			holder.messageCount = (TextView) convertView.findViewById(R.id.home_page_item_commentcounts);			holder.goodCount = (TextView) convertView.findViewById(R.id.home_page_item_goodcounts);			//holder.listView = (ListView) convertView.findViewById(R.id.pl);						holder.layout = (LinearLayout) convertView.findViewById(R.id.lin);			convertView.setTag(holder);		}else{			holder = (Holder) convertView.getTag();			holder.bodyImage1.setVisibility(View.GONE);			holder.bodyImage2.setVisibility(View.GONE);			holder.bodyImage3.setVisibility(View.GONE);			holder.bodyImage4.setVisibility(View.GONE);			holder.name.setText("");			holder.content.setText("");			holder.time.setText("");			holder.goodCount.setText("0");			imageLoader.displayImage("", holder.bodyImage1);			imageLoader.displayImage("", holder.bodyImage2);			imageLoader.displayImage("", holder.bodyImage3);			imageLoader.displayImage("", holder.bodyImage4);			holder.layout.removeAllViews();		}						holder.name.setText(				responseFriendCircleBeans.get(position).getFriendsCircle_nickname());		holder.content.setText(				responseFriendCircleBeans.get(position).getFriendsCircle_content());		imageLoader.displayImage(responseFriendCircleBeans.get(position).getFriendsCircle_icon(), holder.headImage);		holder.time.setText(getTimeString(responseFriendCircleBeans.get(position).getFriendsCircle_time()));		if(responseFriendCircleBeans.get(position).getLikeCount() == null){			holder.goodCount.setText(0 + "");		}else{			holder.goodCount.setText(responseFriendCircleBeans.get(position).getLikeCount() + "");		}		holder.messageCount.setText(responseFriendCircleBeans.get(position).getComments().size() + "");				//holder.listView.setAdapter(new MessageAdapter(mActivity, new ArrayList()));				if(responseFriendCircleBeans.get(position)				.getPictures()!=null && responseFriendCircleBeans.get(position)						.getPictures().size()!=0){			try {				openVisible(responseFriendCircleBeans.get(position)						.getPictures().size(), position, holder);			} catch (Exception e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		String likeString = responseFriendCircleBeans.get(position).getLikeUserIDString();		int id = TempInfo.findFirst.getUser_id();		String sub = id + "";		if(likeString==null){			holder.good.setImageResource(R.drawable.ic_good);		}else{			String[] likes = likeString.split("&");			boolean flag = false;			for(String s : likes){				if(s.equals(sub)){					flag = true;					break;				}			}		}						// TODO Auto-generated method stub		// 点击头像图片		holder.headImage.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				System.out.println("头像点击");				// TODO Auto-generated method stub				//MiddleManager.newInstance().changeUI(PersonInfo.class);							}		});								//holder.bodyImage1.setTag(responseFriendCircleBeans.get(position).getPictures().get(0));				// 点击图片1		holder.bodyImage1.setOnClickListener(				new OnClickListener() {					@Override					public void onClick(View v) {						// TODO Auto-generated method stub						//x.image().bind(holder.bodyImage1,(String)holder.bodyImage1.getTag());						String s = (String)holder.bodyImage1.getTag();						if(s!=null){							startActivityForShowBigImage(s);						}											}				});		// 点击图片2		holder.bodyImage2.setOnClickListener(				new OnClickListener() {					@Override					public void onClick(View v) {												String s = (String)holder.bodyImage2.getTag();						if(s!=null){							startActivityForShowBigImage(s);						}					}				});		// 点击图片3		holder.bodyImage3.setOnClickListener(				new OnClickListener() {						@Override						public void onClick(View v) {							String s = (String)holder.bodyImage3.getTag();						if(s!=null){							startActivityForShowBigImage(s);						}					}				});		// 点击图片4		holder.bodyImage4.setOnClickListener(				new OnClickListener() {					@Override					public void onClick(View v) {												String s = (String)holder.bodyImage4.getTag();						if(s!=null){							startActivityForShowBigImage(s);						}					}				});				holder.good.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				LogUtil.info("点赞!!!");								CommonCallback<String> callback = new CommonCallback<String>() {										@Override					public void onSuccess(String result) {						// TODO Auto-generated method stub												LogUtil.info("onSuccess!!!" + result);												FriendCircleBean bean = JSONObject.parseObject(result, FriendCircleBean.class);						int x = bean.getLikeCount();												holder.goodCount.setText(x+"");						if(bean.isLike()){							holder.good.setImageResource(R.drawable.ic_good_press);							map.put(position, true);						}else{							holder.good.setImageResource(R.drawable.ic_good);							map.put(position, false);						}																	}										@Override					public void onFinished() {						// TODO Auto-generated method stub						LogUtil.info("onFinished!!!");					}										@Override					public void onError(Throwable ex, boolean isOnCallback) {						// TODO Auto-generated method stub						LogUtil.info("onError!!!");					}										@Override					public void onCancelled(CancelledException cex) {						// TODO Auto-generated method stub						LogUtil.info("onFinished!!!");					}				};				NGood nGood = new NGood(mActivity, callback);				nGood.addGood(responseFriendCircleBeans.get(position).getFriendsCircle_ID());							}		});				holder.message.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				LogUtil.info("holder.message.setOnClickListener", "message");				//评论!!!				signPopupWindow.showAtLocation(holder.message, Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 0);				signPopupWindow.setListener(new OnClickSignPopListener() {										@Override					public void onClickSend(String text) {						// TODO Auto-generated method stub						System.out.println("发表评论" + text);						NSendComment comment = new NSendComment(mActivity, new MyHandler(holder,position));												comment.sendComment(text, responseFriendCircleBeans.get(position).getFriendsCircle_ID());												signPopupWindow.setEditText("");											}										@Override					public void onClickAdd() {						// TODO Auto-generated method stub											}				});																				//	holder.layout.addView(add(holder.layout, 1, 10, position,0));			//	signPopupWindow.showAtLocation(v.getRootView(), Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 0);			}		});				// 单击昵称和文本 跳转到单条信息详细页面.		holder.content.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View arg0) {				// TODO Auto-generated method stub				System.out.println("要跳转到朋友圈信息详细页面了");			}		});		System.out.println("评论长度" + responseFriendCircleBeans.get(position).getComments().size());				//holder.layout.removeAllViews();				if(responseFriendCircleBeans.get(position).getComments().size()!=0){			holder.layout.addView(add(holder.layout, responseFriendCircleBeans.get(position).getComments().size(), 5,position,0));			}						return convertView;	}	private LinearLayout add(LinearLayout layout, int i, int pad, int position,int l) {  		System.out.println("添加一次");        LinearLayout layout1 = (LinearLayout) LayoutInflater.from(mActivity)                  .inflate(R.layout.message_item, null);          TextView message = (TextView) layout1.findViewById(R.id.name);        if(responseFriendCircleBeans.get(position).getComments().size() != 0){        	String comments = responseFriendCircleBeans.get(position).getComments().get(l);        	LogUtil.info("LinearLayout add", "l==" + l);        	System.out.println("comments" +comments);        	message.setText(comments);        }        layout.setOrientation(LinearLayout.VERTICAL);          layout.setBackgroundColor(Color.WHITE);          layout.setPadding(pad, pad, pad, pad);          if (i > 1) {          	System.out.println("添加一次 successful");            layout.addView(add(layout, --i, pad, position,++l));          }            //layout.addView(layout1);        return layout1;    }  		public class MyHandler extends Handler{		private Holder holder;				private int position;				public MyHandler(Holder holder,int position) {			super();			this.holder = holder;			this.position = position;		}		@Override		public void handleMessage(Message msg) {			// TODO Auto-generated method stub						int s = msg.what;			if(s == Constructs.NET_SUCCESSFUL){				FriendCircleBean bean = (FriendCircleBean) msg.obj;				String result = bean.getBody();								System.out.println("服务器返回的数据" + result);												  				System.out.println("添加一次");		        LinearLayout layout1 = (LinearLayout) LayoutInflater.from(mActivity)  		                .inflate(R.layout.message_item, null);  		        TextView message = (TextView) layout1.findViewById(R.id.name);		        message.setText(result);		        holder.layout.setOrientation(LinearLayout.VERTICAL);  		        holder.layout.setBackgroundColor(Color.WHITE);  		        holder. layout.setPadding(5, 5, 5, 5);		        holder.layout.addView(layout1);		        		        responseFriendCircleBeans.get(position).getComments().add(result);		        		        signPopupWindow.dismiss();			}		}			}		public class Holder {				 LinearLayout layout; 		public ImageView headImage;		public TextView name;		public TextView content;		public ImageView bodyImage1;		public ImageView bodyImage2;		public ImageView bodyImage3;		public ImageView bodyImage4;		public TextView time;		public ImageView good;		public ImageView message;				public TextView messageCount;		public TextView goodCount;	}		private void startActivityForShowBigImage(String url){		Intent intent = new Intent(mActivity, BigImageActivity.class);		intent.putExtra("imageUrl", url);		mActivity.startActivity(intent);	}}
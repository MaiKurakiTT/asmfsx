package com.hsd.fsxasm.fragment;import org.xutils.DbManager;import org.xutils.x;import org.xutils.ex.DbException;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.view.View;import android.view.View.OnClickListener;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.hsd.fsxasm.R;import com.hsd.fsxasm.activity.FeedBackActivity;import com.hsd.fsxasm.activity.FriendsPersonInfoActivity;import com.hsd.fsxasm.activity.OtherPersonInfoActivity;import com.hsd.fsxasm.activity.SettingActivity;import com.hsd.fsxasm.activity.SettingAfterRegisterActivity;import com.hsd.fsxasm.activity.ShowBigHeadActivity;import com.hsd.fsxasm.base.BaseFragment;import com.hsd.fsxasm.db.MDbString;import com.hsd.fsxasm.db.MDbUser;import com.hsd.fsxasm.db.MDbUtils;import com.hsd.fsxasm.domain.LoginBean;import com.hsd.fsxasm.domain.UserInformationBean;import com.hsd.fsxasm.engine.NLogin;import com.hsd.fsxasm.global.SharedPreferencesString;import com.hsd.fsxasm.utils.AsyncImageLoader;import com.hsd.fsxasm.utils.FormatDate2String;import com.hsd.fsxasm.widget.CircleImageView;public class MeFragment extends BaseFragment{		private CircleImageView headClick;	private TextView nameTV;	private TextView sexTV;	private TextView ageTV;	private TextView schoolTV;	private RelativeLayout topLayout;	private RelativeLayout setClick;	private RelativeLayout appointment;	private MDbUser currentUser;		private String headUrl = "";	private String name= "";	private String sex= "";	private String age= "";	private String school= "";	private String currentUserPhone;	private RelativeLayout helpClick;	private RelativeLayout addFriendsClick;	private RelativeLayout friendcircleClick;	private RelativeLayout appointmentClick;	@Override	protected View initViews() {		getDBDate();		View view = View.inflate(mActivity, R.layout.il_me, null);		headClick = (CircleImageView) view.findViewById(R.id.ic_il_personal_head);		nameTV = (TextView) view.findViewById(R.id.il_personal_name);		sexTV = (TextView) view.findViewById(R.id.il_personal_gender);		ageTV = (TextView) view.findViewById(R.id.il_personal_age);		schoolTV = (TextView) view.findViewById(R.id.il_personal_school);		topLayout = (RelativeLayout) view.findViewById(R.id.il_personal_topbg);		setClick = (RelativeLayout) view.findViewById(R.id.il_personal_setting);		helpClick = (RelativeLayout) view.findViewById(R.id.il_personal_help);		addFriendsClick = (RelativeLayout) view.findViewById(R.id.il_personal_addfriends);		friendcircleClick = (RelativeLayout) view.findViewById(R.id.il_personal_circlefriends);		appointmentClick = (RelativeLayout) view.findViewById(R.id.il_personal_appointment);		appointment = (RelativeLayout) view.findViewById(R.id.il_personal_appointment);		setListener();		return view;	}			/**	 * 从本地数据库中获取用户资料	 */	private void getDBDate() {		currentUserPhone = getConfigInfo(SharedPreferencesString.CURRENT_USER, null);		if(currentUserPhone!=null && currentUserPhone!=""){			DbManager db = x.getDb(MDbUtils.daoConfig);			try {				currentUser = db.selector(MDbUser.class).where(MDbString.phone, "=", currentUserPhone).findFirst();			} catch (DbException e) {				e.printStackTrace();			}			if(currentUser!=null){				headUrl = currentUser.getHead_url();				name = currentUser.getUsername();				sex = currentUser.getSex();				age = FormatDate2String.FormatDate2String(currentUser.getBirthday());				school = currentUser.getSchool();			}					}else{			headUrl = "";			name = "未加载";			sex = "未加载";			age = "未加载";		}			}	@Override	protected void updataUI(Object obj) {		// TODO Auto-generated method stub		LoginBean login = (LoginBean) obj;		if(login!=null){			UserInformationBean userInformation = login.getUserInformation();			MDbUser mDbUser = new MDbUser();			MDbUtils.userInformationBean2MDbUser(userInformation,mDbUser,login.getUser_uuid());			DbManager db = x.getDb(MDbUtils.daoConfig);			try {				db.save(mDbUser);			} catch (DbException e) {				e.printStackTrace();			}			try {				currentUser = db.selector(MDbUser.class).where(MDbString.phone, "=", currentUserPhone).findFirst();			} catch (DbException e) {				e.printStackTrace();			}			if(currentUser!=null){				AsyncImageLoader.getInstance().getImageLoaderInstance(mActivity).displayImage(currentUser.getHead_url(), headClick);				nameTV.setText(currentUser.getUsername());				ageTV.setText(currentUser.getBirthday()+"");				schoolTV.setText(currentUser.getSchool());//				GetAgeFromDate.GetAgeFromDate(currentUser.getBirthday());//				ageTV.setText("");			}else{				nameTV.setText("未加载");				ageTV.setText("未加载");				schoolTV.setText("未加载");			}									/*db.update("", arg1)			try {				db.save(mDbUser);			} catch (DbException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}*/		}						/*MDbUser mDbUser = new MDbUser();		mDbUser.setAge(19);		mDbUser.getAge();		DbManager db = x.getDb(MDbUtils.daoConfig);		try {			db.selector(MDbUser.class).where(MDbString.age, "=", 18).findFirst();		} catch (DbException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}*/	}	@Override	protected void setListener() {		//点击打开头像大图		headClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				startActivityForResult(new Intent(mActivity, ShowBigHeadActivity.class), 1);//				startActivity(new Intent(mActivity, ShowBigHeadActivity.class));			}		});		//打开个人信息		topLayout.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				startActivityForResult(new Intent(mActivity, OtherPersonInfoActivity.class), 1);//				startActivity(new Intent(mActivity, OtherPersonInfoActivity.class));			}		});				setClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {//				Toast.makeText(mActivity, "攻城狮整拼命开发中。。。", 0).show();//				startActivity(new Intent(mActivity, SettingActivity.class));				startActivityForResult(new Intent(mActivity, SettingActivity.class), 1);			}		});		addFriendsClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				Toast.makeText(mActivity, "攻城狮整拼命开发中。。。", Toast.LENGTH_SHORT).show();			}		});		friendcircleClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				Toast.makeText(mActivity, "攻城狮整拼命开发中。。。", Toast.LENGTH_SHORT).show();			}		});		appointmentClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				Toast.makeText(mActivity, "攻城狮整拼命开发中。。。", Toast.LENGTH_SHORT).show();			}		});		appointment.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				Toast.makeText(mActivity, "攻城狮整拼命开发中。。。", Toast.LENGTH_SHORT).show();				/*NLogin login = new NLogin(mActivity, new HttpResponseHandler());				login.login("13283720382", "123456");*/			}		});		helpClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				startActivity(new Intent(mActivity, FeedBackActivity.class));			}		});	}	@Override	protected void initData() {		// TODO Auto-generated method stub		mTitle.setText("我的");		mBack.setVisibility(View.GONE);		mHelp.setVisibility(View.GONE);				if(headUrl!="" && headUrl!=null){			AsyncImageLoader.getInstance().getImageLoaderInstance(mActivity).displayImage(headUrl, headClick);		}		nameTV.setText(name);		sexTV.setText(sex);		ageTV.setText(age);		schoolTV.setText(school);	}		public void headChanged(){		DbManager db = x.getDb(MDbUtils.daoConfig);		try {			MDbUser findFirst = db.selector(MDbUser.class).where(MDbString.phone, "=", currentUserPhone).findFirst();			AsyncImageLoader.getInstance().getImageLoaderInstance(mActivity).displayImage(findFirst.getHead_url(), headClick);		} catch (DbException e) {			e.printStackTrace();		}	}	public void personInfoChanged(){		DbManager db = x.getDb(MDbUtils.daoConfig);		try {			MDbUser findFirst = db.selector(MDbUser.class).where(MDbString.phone, "=", currentUserPhone).findFirst();			nameTV.setText(findFirst.getUsername());			ageTV.setText(FormatDate2String.FormatDate2String(findFirst.getBirthday()));			schoolTV.setText(findFirst.getSchool());		} catch (DbException e) {			e.printStackTrace();		}	}	@Override	public void flushData() {		// TODO Auto-generated method stub			}}
package com.hsd.fsxasm.base;import org.xutils.x;import android.app.Activity;import android.content.Context;import android.content.SharedPreferences;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.view.View;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.hsd.fsxasm.R;import com.hsd.fsxasm.global.Constructs;/** * 基础的Activity,所有的UI层的Activity均继承于该类,已经加入了xutil注解功能 * @Description:  * @Author: easylove * @Version: V1.00 （版本号） * @Create Date: 2016年4月16日22:14:34 * @Parameters: */public abstract class BaseActivity extends Activity{		protected Activity mActivity;		protected View mRootView;		protected SharedPreferences sp;		protected TextView mTitle;	protected ImageView mBack;	protected TextView mHelp;	@Override	protected void onCreate(Bundle savedInstanceState) {		// TODO Auto-generated method stub		super.onCreate(savedInstanceState);				mActivity = this;				sp = mActivity.getSharedPreferences("init", Context.MODE_PRIVATE);				mRootView = initView();		mTitle = (TextView) mRootView.findViewById(R.id.id_title);		mBack = (ImageView) mRootView.findViewById(R.id.id_title_back);		mHelp = (TextView) mRootView.findViewById(R.id.id_title_help);		setContentView(mRootView);		x.view().inject(this);		initData();		setListener();	}			/**	 * 初始化数据	 */	protected abstract void initData();	/**	 * 子类去初始化界面	 * @return	 */	protected abstract View initView();		/**	 * 更新ui操作,常常为调用了业务方法之后由handler调用	 * @param obj	 */	protected abstract void updataUI(Object obj);		/**	 * 更新ui操作,常常为调用了业务方法之后由handler调用,可以根据不同的结果码做对应的事情	 * @param obj	 */	protected void updataUI(Object obj ,  int resultCode){			}		/**	 * 设置对应按钮的事件监听	 */	protected abstract void setListener();		/**	 * 嵌入到baseactivity的一个内部handler,用来接收业务方法传递过来的信息	 * @Description: 	 * @Author: easylove	 * @Version: V1.00 （版本号）	 * @Create Date: 2015-12-2下午7:53:19	 * @Parameters:	 */	public class HttpResponseHandler extends Handler{		public HttpResponseHandler() {			// TODO Auto-generated constructor stub		}				@Override		public void handleMessage(Message msg) {			int id = msg.what;			Object obj = msg.obj;			int result = msg.arg1;			switch (id) {			case Constructs.NET_CANCLED:				net_cancled();				break;			case Constructs.NET_ERROR:				Throwable ta = (Throwable) obj;				net_error(ta);					break;			case Constructs.NET_FINISHED:				net_finished();				break;			case Constructs.NET_SUCCESSFUL:				if(result==0){					updataUI(msg.obj);				}else{					updataUI(msg.obj, result);				}								break;			case Constructs.NET_VISIBLE:				//当前网络不可用				break;			}		}	}		/**	 * 网络请求被取消	 */	protected void net_cancled() {		//Toast.makeText(mActivity, "用户取消操作", 1).show();	}	/**	 * 网络错误	 */	protected void net_error(Throwable tb) {		tb.printStackTrace();		Toast.makeText(mActivity, "网络环境不佳,请稍后重试", 0).show();	}	/**	 * 网络请求完成	 */	protected void net_finished() {		//Toast.makeText(mActivity, "net_finished", 1).show();	}		//----------------------SharedPreferences的一些实现 --------------- 	public boolean getConfigInfo(String key , boolean defValue) {		return sp.getBoolean(key, defValue);	}		public String getConfigInfo(String key , String defValue) {		return sp.getString(key, defValue);	}		public void saveConfigInfo(String key, boolean defValue) {		sp.edit().putBoolean(key, defValue).commit();	}		public void saveConfigInfo(String key, String defValue) {		sp.edit().putString(key, defValue).commit();	}	//----------------------SharedPreferences的一些实现---------------}
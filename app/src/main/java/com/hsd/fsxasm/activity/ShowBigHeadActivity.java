package com.hsd.fsxasm.activity;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import org.xutils.DbManager;import org.xutils.x;import org.xutils.ex.DbException;import android.app.AlertDialog;import android.app.AlertDialog.Builder;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.ColorDrawable;import android.graphics.drawable.Drawable;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.os.Looper;import android.os.Message;import android.provider.MediaStore;import android.view.Gravity;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup.LayoutParams;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.PopupWindow;import android.widget.RelativeLayout;import android.widget.Toast;import com.alibaba.fastjson.JSONObject;import com.hsd.fsxasm.R;import com.hsd.fsxasm.base.BaseActivity;import com.hsd.fsxasm.db.MDbString;import com.hsd.fsxasm.db.MDbUser;import com.hsd.fsxasm.db.MDbUtils;import com.hsd.fsxasm.domain.BaseBean;import com.hsd.fsxasm.domain.UserInformationBean;import com.hsd.fsxasm.engine.NUpDateUserInfo;import com.hsd.fsxasm.engine.NUploadImage;import com.hsd.fsxasm.fragment.MeFragment;import com.hsd.fsxasm.global.SharedPreferencesString;import com.hsd.fsxasm.utils.AsyncImageLoader;import com.hsd.fsxasm.utils.SettingHead;public class ShowBigHeadActivity extends BaseActivity {	private ImageView headIV;	private ImageView moreClick;	private View parent;	private View popupView;	private PopupWindow popupWindow;	private RelativeLayout setHeadClick;	private RelativeLayout closeClick;	private SettingHead settingHead;	private Bitmap headBT;	private AlertDialog dialog;	private MDbUser currentUser;	private String headUrl;	@Override	protected View initView() {		parent = View.inflate(this, R.layout.il_show_bighead, null);		headIV = (ImageView) parent.findViewById(R.id.ic_show_bighead_head);		moreClick = (ImageView) parent.findViewById(R.id.ic_show_bighead_more);		popupView = View.inflate(this, R.layout.il_showbighead_singlechoice,				null);		popupWindow = new PopupWindow(popupView, LayoutParams.MATCH_PARENT,				LayoutParams.WRAP_CONTENT);		setHeadClick = (RelativeLayout) popupView				.findViewById(R.id.il_showbighead_singlechoice_sethead);		;		closeClick = (RelativeLayout) popupView				.findViewById(R.id.il_showbighead_singlechoice_close);		return parent;	}	@Override	protected void updataUI(Object obj) {		BaseBean baseBean = (BaseBean) obj;		if (baseBean.getResultCode() == 1) {			Toast.makeText(mActivity, "设置成功", 1).show();						mFinish();		} else {			Toast.makeText(mActivity, "设置失败", 1).show();			finish();		}	}	@Override	protected void setListener() {		parent.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				mFinish();			}		});		moreClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				showPopupWindow(moreClick);			}		});		setHeadClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				showSetHeadDialog();				popupWindow.dismiss();			}		});		closeClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				popupWindow.dismiss();			}		});	}	@Override	protected void initData() {		settingHead = new SettingHead(ShowBigHeadActivity.this);		headBT = settingHead.getHeadBT();		String currentUserPhone = getConfigInfo(				SharedPreferencesString.CURRENT_USER, null);		if (currentUserPhone != null && currentUserPhone != "") {			DbManager db = x.getDb(MDbUtils.daoConfig);			try {				currentUser = db.selector(MDbUser.class)						.where(MDbString.phone, "=", currentUserPhone)						.findFirst();			} catch (DbException e) {				e.printStackTrace();			}			if (currentUser != null) {				AsyncImageLoader.getInstance().getImageLoaderInstance(this)						.displayImage(currentUser.getHead_url(), headIV);			} else {			}		}else{			headIV.setImageResource(R.drawable.ic_inithead);		}	}	private void showPopupWindow(View view) {		popupWindow.setBackgroundDrawable(new ColorDrawable(Color				.parseColor("#E9E9E9")));		popupWindow.showAtLocation(view, Gravity.BOTTOM, 0, 0);		popupWindow.setAnimationStyle(R.style.AnimBottom);		popupWindow.setFocusable(true);		popupWindow.setOutsideTouchable(true);		popupWindow.update();	}	private void showSetHeadDialog() {		LinearLayout clickChoosePhoto;		LinearLayout clickTakePhoto;		AlertDialog.Builder builder = new Builder(ShowBigHeadActivity.this,				R.style.dialog);		View view = View.inflate(ShowBigHeadActivity.this,				R.layout.il_singlechoice_sethead, null);		ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(				ViewGroup.LayoutParams.MATCH_PARENT,				ViewGroup.LayoutParams.MATCH_PARENT);		view.setLayoutParams(params);		builder.setView(view);		dialog = builder.show();		dialog.setView(view, 0, 0, 0, 0);		clickChoosePhoto = (LinearLayout) view				.findViewById(R.id.il_setheaddialog_first);		clickTakePhoto = (LinearLayout) view				.findViewById(R.id.il_setheaddialog_second);		/**		 * 选择从相册找图片		 */		clickChoosePhoto.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				settingHead.choosePhoto();				dialog.dismiss();			}		});		/**		 * 调用相机拍照		 */		clickTakePhoto.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				settingHead.takePhoto();				dialog.dismiss();			}		});	}	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		switch (requestCode) {		case 1:			if (resultCode == RESULT_OK) {				settingHead.cropPhoto(data.getData());// 裁剪图片			}			break;		case 2:			if (resultCode == RESULT_OK) {				File temp = new File(Environment.getExternalStorageDirectory()						+ "/head.jpg");				settingHead.cropPhoto(Uri.fromFile(temp));// 裁剪图片			}			break;		case 3:			if (data != null) {				Bundle extras = data.getExtras();				headBT = extras.getParcelable("data");				if (headBT != null) {					/**					 * 上传服务器代码					 */					settingHead.setPicToView(headBT);// 保存在SD卡中					Drawable drawable = new BitmapDrawable(headBT);					headIV.setImageDrawable(drawable);					upLoadImg();					// upLoadImg(path + "head.jpg");					// ivHead.setImageBitmap(head);//用ImageView显示出来				}			}			break;		default:			break;		}		super.onActivityResult(requestCode, resultCode, data);	};	private void mFinish() {		setResult(1);		finish();	}	/*	 * 上传头像到服务器	 */	private void upLoadImg() {		if (currentUser != null) {			UserInformationBean userInformationBean = new UserInformationBean();			userInformationBean.setUUID(currentUser.getUuid());			// userInformationBean.setUser_icon("");			userInformationBean.setUser_nickname(currentUser.getUsername());			userInformationBean.setUser_sex(currentUser.getSex());			userInformationBean.setUser_birthday(currentUser.getBirthday());			userInformationBean.setUser_star(currentUser.getStar());			userInformationBean.setUser_height(currentUser.getHeight());			userInformationBean.setUser_sign(currentUser.getSign());			userInformationBean.setUser_school(currentUser.getSchool());			userInformationBean.setUser_department(currentUser.getDepartment());			userInformationBean.setUser_locality(currentUser.getLocation());			userInformationBean.setUser_state(currentUser.getStatus());			if (userInformationBean != null) {				NUploadImage uploadImage = new NUploadImage(mActivity,						new HttpResponseHandler());				uploadImage.uploadImageAndUpDateUserInfo(						"/sdcard/asmfsx/image/head.jpg", userInformationBean,						mActivity, new HttpResponseHandler());			} else {			}		}	}	/*private void requestService() {		if (currentUser != null) {			UserInformationBean userInformationBean = new UserInformationBean();			userInformationBean.setUUID(currentUser.getUuid());			userInformationBean.setUser_icon("");			userInformationBean.setUser_nickname(currentUser.getUsername());			userInformationBean.setUser_sex(currentUser.getSex());			userInformationBean.setUser_birthday(currentUser.getBirthday());			userInformationBean.setUser_star(currentUser.getStar());			userInformationBean.setUser_height(currentUser.getHeight());			userInformationBean.setUser_sign(currentUser.getSign());			userInformationBean.setUser_school(currentUser.getSchool());			userInformationBean.setUser_department(currentUser.getDepartment());			userInformationBean.setUser_locality(currentUser.getLocation());			userInformationBean.setUser_state(currentUser.getStatus());			if (userInformationBean != null) {				NUpDateUserInfo nUpDateUserInfo = new NUpDateUserInfo(						mActivity, new HttpResponseHandler());				nUpDateUserInfo.UpDateUserInfo(userInformationBean);			} else {			}		}	}*/}
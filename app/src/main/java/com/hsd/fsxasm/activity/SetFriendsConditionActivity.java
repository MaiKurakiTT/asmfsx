package com.hsd.fsxasm.activity;import java.util.Calendar;import java.util.Date;import org.xutils.DbManager;import org.xutils.x;import org.xutils.ex.DbException;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.view.View.OnClickListener;import android.view.ViewGroup.LayoutParams;import android.widget.ListView;import android.widget.PopupWindow;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.alibaba.fastjson.JSONObject;import com.hsd.fsxasm.R;import com.hsd.fsxasm.base.BaseActivity;import com.hsd.fsxasm.db.MDbString;import com.hsd.fsxasm.db.MDbUser;import com.hsd.fsxasm.db.MDbUtils;import com.hsd.fsxasm.domain.FindFriendsBean;import com.hsd.fsxasm.global.SharedPreferencesString;import com.hsd.fsxasm.widget.cityanddatewheel.wheelcity.AddressData;import com.hsd.fsxasm.widget.cityanddatewheel.wheelcity.OnWheelChangedListener;import com.hsd.fsxasm.widget.cityanddatewheel.wheelcity.WheelView;import com.hsd.fsxasm.widget.cityanddatewheel.wheelcity.adapters.AbstractWheelTextAdapter;import com.hsd.fsxasm.widget.cityanddatewheel.wheelcity.adapters.ArrayWheelAdapter;public class SetFriendsConditionActivity extends BaseActivity {	private RelativeLayout clickSetAge;	private RelativeLayout clickSetHeight;	private RelativeLayout clickSetSchool;	private RelativeLayout clickSetLocation;	private RelativeLayout clickOk;		private TextView ageConditionTVMin;	private TextView ageConditionTVMax;	private TextView heightConditionTVMin;	private TextView heightConditionTVMax;	private TextView schoolConditionTV;	private TextView homeConditionTV;		private String ageCondition;	private String ageMin = "18";	private String ageMax = "20";	private String heightCondition;	private String heightMin = "160";	private String heightMax = "165";	private String schoolCondition;	private String homeCondition;		private Date ageConditionMin;	private Date ageConditionMax;	private Integer heightConditionMin;	private Integer heightConditionMax;		private String cityTxt;		private PopupWindow agePopupWindow;	private PopupWindow heightPopupWindow;	private PopupWindow homePopupWindow;			private String currentUserPhone;	private MDbUser currentUser;	private String sex;				@Override	protected View initView() {		View parent = View.inflate(this, R.layout.il_setfriendscondition, null);		clickSetAge = (RelativeLayout) parent.findViewById(R.id.il_setfriendscondition_age);		clickSetHeight = (RelativeLayout) parent.findViewById(R.id.il_setfriendscondition_height);		clickSetSchool = (RelativeLayout) parent.findViewById(R.id.il_setfriendscondition_school);		clickSetLocation = (RelativeLayout) parent.findViewById(R.id.il_setfriendscondition_location);		clickOk = (RelativeLayout) parent.findViewById(R.id.il_setfriendscondition_ok);		ageConditionTVMin = (TextView) parent.findViewById(R.id.it_setfriendscondition_agemin);		ageConditionTVMax = (TextView) parent.findViewById(R.id.it_setfriendscondition_agemax);		heightConditionTVMin = (TextView) parent.findViewById(R.id.it_setfriendscondition_heightmin);		heightConditionTVMax = (TextView) parent.findViewById(R.id.it_setfriendscondition_heightmax);		homeConditionTV = (TextView) parent.findViewById(R.id.it_setfriendscondition_location);		agePopupWindow = new PopupWindow(dialogm(),LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);		heightPopupWindow = new PopupWindow(dialogm2(), LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);		homePopupWindow = new PopupWindow(dialogm3(), LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);		schoolConditionTV = (TextView) parent.findViewById(R.id.it_setfriendscondition_school);		return parent;	}	@Override	protected void updataUI(Object obj) {		// TODO Auto-generated method stub	}	@Override	protected void initData() {		mBack.setVisibility(View.VISIBLE);		mTitle.setText("设置择友条件");	}	@Override	protected void setListener() {		mBack.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				finish();			}		});				clickSetAge.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				// TODO Auto-generated method stub				WindowManager wm = (WindowManager) SetFriendsConditionActivity.this						.getSystemService(Context.WINDOW_SERVICE);				int height = wm.getDefaultDisplay().getHeight();				agePopupWindow.setHeight(height*1/3);				showPopupWindow(agePopupWindow,clickSetAge);			}		});		clickSetHeight.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				// TODO Auto-generated method stub				WindowManager wm = (WindowManager) SetFriendsConditionActivity.this						.getSystemService(Context.WINDOW_SERVICE);				int height = wm.getDefaultDisplay().getHeight();				heightPopupWindow.setHeight(height*1/3);				showPopupWindow(heightPopupWindow,clickSetHeight);			}		});		clickSetSchool.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				// TODO Auto-generated method stub			}		});		clickSetLocation.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				// TODO Auto-generated method stub				WindowManager wm = (WindowManager) SetFriendsConditionActivity.this						.getSystemService(Context.WINDOW_SERVICE);				int height = wm.getDefaultDisplay().getHeight();				homePopupWindow.setHeight(height*1/3);				showPopupWindow(homePopupWindow,clickSetLocation);			}		});		clickOk.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				FindFriendsBean findFriendsBean = getUpLoadData();				String jsonString = JSONObject.toJSONString(findFriendsBean);				Intent intent = new Intent();				intent.putExtra("findFriendsBean", jsonString);				setResult(3, intent);				finish();			}		});	}		private FindFriendsBean getUpLoadData(){		int currentYear = Calendar.getInstance().getTime().getYear();		ageConditionMin = new Date(currentYear - Integer.valueOf(ageConditionTVMin.getText().toString()), 1, 1);		ageConditionMax = new Date(currentYear - Integer.valueOf(ageConditionTVMax.getText().toString()), 12, 30);		heightMin = heightConditionTVMin.getText().toString().replaceAll("cm", "");		heightMax = heightConditionTVMax.getText().toString().replaceAll("cm", "");		heightConditionMin = Integer.valueOf(heightMin);		heightConditionMax = Integer.valueOf(heightMax);		schoolCondition = schoolConditionTV.getText().toString();		homeCondition = homeConditionTV.getText().toString();				getDBDate();		FindFriendsBean findFriendsBean = new FindFriendsBean();		findFriendsBean.setAgeMin(ageConditionTVMin.getText()+"");		findFriendsBean.setAgeMax(ageConditionTVMax.getText()+"");		findFriendsBean.setHeightMin(heightConditionMin);		findFriendsBean.setHeightMax(heightConditionMax);		findFriendsBean.setSchoolName(schoolCondition);		findFriendsBean.setLocation(homeCondition);		//这两项在请求findfriends的时候再设置//		findFriendsBean.setFindFriend_pageNow(1);//		findFriendsBean.setFindFriend_pageSize(100);		findFriendsBean.setSex(sex);				return findFriendsBean;	}		/**	 * 从本地数据库中获取用户资料	 */	private void getDBDate() {		currentUserPhone = getConfigInfo(SharedPreferencesString.CURRENT_USER, null);		if(currentUserPhone!=null && currentUserPhone!=""){			DbManager db = x.getDb(MDbUtils.daoConfig);			try {				currentUser = db.selector(MDbUser.class).where(MDbString.phone, "=", currentUserPhone).findFirst();			} catch (DbException e) {				e.printStackTrace();			}			if(currentUser!=null){				if(currentUser.getSex().equals("女")){					sex = "男";					System.out.println("应该推送男生");				}else{					sex = "女";					System.out.println("应该推送女生");				}			}					}else{			sex = "女";			System.out.println("默认推送女生");		}			}		private View dialogm() {		View contentView = LayoutInflater.from(this).inflate(				R.layout.wheelcity_ageorheight_layout, null);		TextView setTextTitle = (TextView) contentView.findViewById(R.id.wheelheight_settexttitle);		setTextTitle.setText("设置年龄");		final WheelView country = (WheelView) contentView				.findViewById(R.id.wheelheight_min);		final WheelView country1 = (WheelView) contentView				.findViewById(R.id.wheelheight_max);		country.setVisibleItems(3);		country.setViewAdapter(new CountryAdapter(this));		country1.setVisibleItems(3);		country1.setViewAdapter(new CountryAdapter(this));		country.addChangingListener(new OnWheelChangedListener() {			public void onChanged(WheelView wheel, int oldValue, int newValue) {				cityTxt = AddressData.AGE[country.getCurrentItem()];				ageMin = cityTxt;				ageConditionTVMin.setText(ageMin);							}		});		country1.addChangingListener(new OnWheelChangedListener() {			public void onChanged(WheelView wheel, int oldValue, int newValue) {				cityTxt = AddressData.AGE[country1.getCurrentItem()];				ageMax = cityTxt;				ageConditionTVMax.setText(ageMax);			}		});		country.setCurrentItem(1);// 设置北京		country1.setCurrentItem(2);		return contentView;	}		private View dialogm2() {		View contentView = LayoutInflater.from(this).inflate(				R.layout.wheelcity_ageorheight_layout, null);		TextView setTextTitle = (TextView) contentView.findViewById(R.id.wheelheight_settexttitle);		setTextTitle.setText("设置身高");		final WheelView country = (WheelView) contentView				.findViewById(R.id.wheelheight_min);		final WheelView country1 = (WheelView) contentView				.findViewById(R.id.wheelheight_max);		country.setVisibleItems(3);		country.setViewAdapter(new CountryAdapter2(this));		country1.setVisibleItems(3);		country1.setViewAdapter(new CountryAdapter2(this));		country.addChangingListener(new OnWheelChangedListener() {			public void onChanged(WheelView wheel, int oldValue, int newValue) {				cityTxt = AddressData.HEIGHT[country.getCurrentItem()];				heightMin = cityTxt;				heightConditionTVMin.setText(heightMin);							}		});		country1.addChangingListener(new OnWheelChangedListener() {			public void onChanged(WheelView wheel, int oldValue, int newValue) {				cityTxt = AddressData.HEIGHT[country1.getCurrentItem()];				heightMax = cityTxt;				heightConditionTVMax.setText(heightMax);			}		});		country.setCurrentItem(1);// 设置北京		country1.setCurrentItem(2);		return contentView;	}	/**	 * Adapter for countries	 */	private class CountryAdapter extends AbstractWheelTextAdapter {		// Countries names		private String countries[] = AddressData.AGE;		/**		 * Constructor		 */		protected CountryAdapter(Context context) {			super(context, R.layout.wheelcity_height_item_layout, NO_RESOURCE);			setItemTextResource(R.id.wheelheight_height_name);		}		@Override		public View getItem(int index, View cachedView, ViewGroup parent) {			View view = super.getItem(index, cachedView, parent);			return view;		}		@Override		public int getItemsCount() {			return countries.length;		}		@Override		protected CharSequence getItemText(int index) {			return countries[index];		}	}	private class CountryAdapter2 extends AbstractWheelTextAdapter {		// Countries names		private String countries[] = AddressData.HEIGHT;		/**		 * Constructor		 */		protected CountryAdapter2(Context context) {			super(context, R.layout.wheelcity_height_item_layout, NO_RESOURCE);			setItemTextResource(R.id.wheelheight_height_name);		}		@Override		public View getItem(int index, View cachedView, ViewGroup parent) {			View view = super.getItem(index, cachedView, parent);			return view;		}		@Override		public int getItemsCount() {			return countries.length;		}		@Override		protected CharSequence getItemText(int index) {			return countries[index];		}	}		private View dialogm3() {		View contentView = LayoutInflater.from(this).inflate(				R.layout.wheelcity_cities_layout, null);		final WheelView country = (WheelView) contentView				.findViewById(R.id.wheelcity_country);		country.setVisibleItems(3);		country.setViewAdapter(new CountryAdapter3(this));		final String cities[][] = AddressData.CITIES;		final String ccities[][][] = AddressData.COUNTIES;		final WheelView city = (WheelView) contentView				.findViewById(R.id.wheelcity_city);		city.setVisibleItems(0);		// 地区选择		final WheelView ccity = (WheelView) contentView				.findViewById(R.id.wheelcity_ccity);		ccity.setVisibleItems(0);// 不限城市		country.addChangingListener(new OnWheelChangedListener() {			public void onChanged(WheelView wheel, int oldValue, int newValue) {				updateCities3(city, cities, newValue);				cityTxt = AddressData.PROVINCES[country.getCurrentItem()]						+ " | "						+ AddressData.CITIES[country.getCurrentItem()][city								.getCurrentItem()]						+ " | "						+ AddressData.COUNTIES[country.getCurrentItem()][city								.getCurrentItem()][ccity.getCurrentItem()];				homeConditionTV.setText(cityTxt);			}		});		city.addChangingListener(new OnWheelChangedListener() {			public void onChanged(WheelView wheel, int oldValue, int newValue) {				updatecCities3(ccity, ccities, country.getCurrentItem(),						newValue);				cityTxt = AddressData.PROVINCES[country.getCurrentItem()]						+ " | "						+ AddressData.CITIES[country.getCurrentItem()][city								.getCurrentItem()]						+ " | "						+ AddressData.COUNTIES[country.getCurrentItem()][city								.getCurrentItem()][ccity.getCurrentItem()];				homeConditionTV.setText(cityTxt);			}		});		ccity.addChangingListener(new OnWheelChangedListener() {			public void onChanged(WheelView wheel, int oldValue, int newValue) {				cityTxt = AddressData.PROVINCES[country.getCurrentItem()]						+ " | "						+ AddressData.CITIES[country.getCurrentItem()][city								.getCurrentItem()]						+ " | "						+ AddressData.COUNTIES[country.getCurrentItem()][city								.getCurrentItem()][ccity.getCurrentItem()];				homeConditionTV.setText(cityTxt);			}		});		country.setCurrentItem(1);// 设置北京		city.setCurrentItem(1);		ccity.setCurrentItem(1);		return contentView;	}	/**	 * Updates the city wheel	 */	private void updateCities3(WheelView city, String cities[][], int index) {		ArrayWheelAdapter<String> adapter = new ArrayWheelAdapter<String>(this,				cities[index]);		adapter.setTextSize(18);		city.setViewAdapter(adapter);		city.setCurrentItem(0);	}	/**	 * Updates the ccity wheel	 */	private void updatecCities3(WheelView city, String ccities[][][], int index,			int index2) {		ArrayWheelAdapter<String> adapter = new ArrayWheelAdapter<String>(this,				ccities[index][index2]);		adapter.setTextSize(18);		city.setViewAdapter(adapter);		city.setCurrentItem(0);	}	/**	 * Adapter for countries	 */	private class CountryAdapter3 extends AbstractWheelTextAdapter {		// Countries names		private String countries[] = AddressData.PROVINCES;		/**		 * Constructor		 */		protected CountryAdapter3(Context context) {			super(context, R.layout.wheelcity_country_layout, NO_RESOURCE);			setItemTextResource(R.id.wheelcity_country_name);		}		@Override		public View getItem(int index, View cachedView, ViewGroup parent) {			View view = super.getItem(index, cachedView, parent);			return view;		}		@Override		public int getItemsCount() {			return countries.length;		}		@Override		protected CharSequence getItemText(int index) {			return countries[index];		}	}	/**	 * PopUpWindow通用设置方法，传入PopupWindow对象和一个触发此事件的控件对象	 * @param popupWindow 	 * @param viewGroup	 */	private void showPopupWindow(PopupWindow popupWindow, ViewGroup viewGroup ){		popupWindow.setBackgroundDrawable(new ColorDrawable(Color				.parseColor("#E9E9E9")));		popupWindow.showAtLocation(viewGroup, Gravity.BOTTOM, 0, 0);		popupWindow.setAnimationStyle(R.style.AnimBottom);		popupWindow.setFocusable(true);		popupWindow.setOutsideTouchable(true);		popupWindow.update();	}}
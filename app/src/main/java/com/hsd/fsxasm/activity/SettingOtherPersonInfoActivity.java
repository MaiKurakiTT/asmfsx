package com.hsd.fsxasm.activity;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import org.xutils.DbManager;import org.xutils.x;import org.xutils.ex.DbException;import android.app.AlertDialog;import android.app.AlertDialog.Builder;import android.content.Intent;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.hsd.fsxasm.R;import com.hsd.fsxasm.base.BaseActivity;import com.hsd.fsxasm.db.MDbString;import com.hsd.fsxasm.db.MDbUser;import com.hsd.fsxasm.db.MDbUtils;import com.hsd.fsxasm.domain.BaseBean;import com.hsd.fsxasm.domain.UserInformationBean;import com.hsd.fsxasm.engine.NUpDateUserInfo;import com.hsd.fsxasm.global.SharedPreferencesString;import com.hsd.fsxasm.utils.FormatDate2String;import com.hsd.fsxasm.widget.sortlistview.SortListView;public class SettingOtherPersonInfoActivity extends BaseActivity {	private EditText nameText;	private TextView sexText;	private RelativeLayout setBirthdayClick;	private TextView birthdayText;	private TextView constellationText;	private RelativeLayout setHeightClick;	private TextView heightText;	private RelativeLayout setSignatureClick;	private TextView signatureText;	private TextView schoolText;	private RelativeLayout setDepartClick;	private TextView departmentText;	private RelativeLayout setHome;	private TextView homeText;	private AlertDialog dialog;	private RelativeLayout setAffectiveClick;	private TextView affectiveText;	private Date birthdayDate;	private Integer heightInt;	private String name = "";	private String sex = "";	private String birthday = "";	private String constellation = "";	private String height = "";	private String signature = "";	private String school = "";	private String department = "";	private String home = "";	private String affective = "";	private String headUrl = "";	private final int BIRTHDAY_RESULTCODE = 10, HEIGHT_RESULTCODE = 11,			SIGNATURE_RESULTCODE = 3, SCHOOL_RESULTCODE = 4,			DEPARTMENT_RESULTCODE = 5, HOME_RESULTCODE = 12;	private MDbUser currentUser;	private TextView userIDText;	private int userID;	private String currentUserPhone;	@Override	protected View initView() {		getDBDate();		View parent = View.inflate(this, R.layout.il_setotherpersoninfo, null);		nameText = (EditText) parent				.findViewById(R.id.id_setotherpersoninfo_nickname);		sexText = (TextView) parent				.findViewById(R.id.id_setotherpersoninfo_sex);		birthdayText = (TextView) parent				.findViewById(R.id.id_setotherpersoninfo_brithday);		constellationText = (TextView) parent				.findViewById(R.id.id_setotherpersoninfo_constellation);		heightText = (TextView) parent				.findViewById(R.id.id_setotherpersoninfo_height);		schoolText = (TextView) parent				.findViewById(R.id.id_setotherpersoninfo_school);		departmentText = (TextView) parent				.findViewById(R.id.id_setotherpersoninfo_department);		homeText = (TextView) parent				.findViewById(R.id.id_setotherpersoninfo_location);		signatureText = (TextView) parent				.findViewById(R.id.id_setotherpersoninfo_signature);		userIDText = (TextView) parent				.findViewById(R.id.id_setotherpersoninfo_id);		affectiveText = (TextView) parent				.findViewById(R.id.id_setotherpersoninfo_affectivestate);		setBirthdayClick = (RelativeLayout) parent				.findViewById(R.id.il_setotherpersoninfo_brithday);		setHeightClick = (RelativeLayout) parent				.findViewById(R.id.il_setotherpersoninfo_height);		setSignatureClick = (RelativeLayout) parent				.findViewById(R.id.il_setotherpersoninfo_signature);		setDepartClick = (RelativeLayout) parent				.findViewById(R.id.il_setotherpersoninfo_department);		setAffectiveClick = (RelativeLayout) parent				.findViewById(R.id.il_setotherpersoninfo_affectivestate);		setHome = (RelativeLayout) parent				.findViewById(R.id.il_setotherpersoninfo_location);		return parent;	}	/**	 * 从本地数据库中获取用户资料	 */	private void getDBDate() {		currentUserPhone = getConfigInfo(SharedPreferencesString.CURRENT_USER,				null);		if (currentUserPhone != null && currentUserPhone != "") {			DbManager db = x.getDb(MDbUtils.daoConfig);			try {				currentUser = db.selector(MDbUser.class)						.where(MDbString.phone, "=", currentUserPhone)						.findFirst();			} catch (DbException e) {				e.printStackTrace();			}			if (currentUser != null) {				name = currentUser.getUsername();				sex = currentUser.getSex();				birthday = FormatDate2String.FormatDate2String(currentUser						.getBirthday());				constellation = currentUser.getStar();				height = currentUser.getHeight() + "";				signature = currentUser.getSign();				userID = currentUser.getUser_id();				school = currentUser.getSchool();				department = currentUser.getDepartment();				home = currentUser.getLocation();				affective = currentUser.getStatus();				headUrl = currentUser.getHead_url();			}		} else {		}	}	@Override	protected void initData() {		// TODO Auto-generated method stub		mTitle.setText("编辑资料");		mHelp.setText("完成");		mBack.setVisibility(View.VISIBLE);		mHelp.setVisibility(View.VISIBLE);		nameText.setText(name);		sexText.setText(sex);		birthdayText.setText(birthday + "");		constellationText.setText(constellation);		heightText.setText(height + "cm");		schoolText.setText(school);		departmentText.setText(department);		homeText.setText(home);		signatureText.setText(signature);		userIDText.setText(userID + "");		affectiveText.setText(affective);	}	@Override	protected void updataUI(Object obj) {		BaseBean baseBean = (BaseBean) obj;		if (baseBean.getResultCode() == 1) {			Toast.makeText(mActivity, "保存成功", 1).show();			mfinish();		} else {			Toast.makeText(mActivity, "保存失败", 1).show();			finish();		}	}	private void mfinish() {		getUploadData();		/**		 * 更新本地数据库中个人信息		 */		DbManager db = x.getDb(MDbUtils.daoConfig);		MDbUser mDbUser = new MDbUser();		try {			mDbUser.setId(1);			mDbUser.setUsername(name);			mDbUser.setBirthday(birthdayDate);			mDbUser.setStar(constellation);			mDbUser.setHeight(heightInt);			mDbUser.setSign(signature);			mDbUser.setSchool(school);			mDbUser.setDepartment(department);			mDbUser.setLocation(home);			mDbUser.setStatus(affective);			mDbUser.setHead_url(headUrl);			db.update(mDbUser, MDbString.username, MDbString.birthday,					MDbString.star, MDbString.height, MDbString.sign,					MDbString.school, MDbString.department, MDbString.location,					MDbString.status, MDbString.head_url);			// db.update(MDbUser.class, MDbString.head_url, imgUrl);		} catch (DbException e) {			e.printStackTrace();		}		setResult(2);		finish();	}	@Override	protected void setListener() {		// TODO Auto-generated method stub		mBack.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				finish();			}		});		mHelp.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				/**				 * 提交网络				 */				requestService();			}		});		setBirthdayClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				birthday = birthdayText.getText().toString();				constellation = constellationText.getText().toString();				Intent intent = new Intent(SettingOtherPersonInfoActivity.this,						SetBirthdayActivity.class);				intent.putExtra("birthday", birthday);				intent.putExtra("constellation", constellation);				startActivityForResult(intent, 10);			}		});		setHeightClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				height = heightText.getText().toString();				Intent intent = new Intent(SettingOtherPersonInfoActivity.this,						SetHeightActivity.class);				intent.putExtra("height", height);				startActivityForResult(intent, 2);			}		});		setSignatureClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				signature = signatureText.getText().toString();				Intent intent = new Intent(SettingOtherPersonInfoActivity.this,						SetSignatureActivity.class);				intent.putExtra("signature", signature);				startActivityForResult(intent, 3);			}		});		setDepartClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				Intent intent = new Intent(SettingOtherPersonInfoActivity.this,						SortListView.class);				startActivityForResult(intent, 5);			}		});		setAffectiveClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				showAffectiveStateDialog();			}		});		setHome.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				home = homeText.getText().toString();				Intent intent = new Intent(SettingOtherPersonInfoActivity.this,						SetLocationActivity.class);				intent.putExtra("home", home);				startActivityForResult(intent, 6);			}		});	}	/**	 * 显示设置恋爱状态的对话框并设置单击事件	 */	private void showAffectiveStateDialog() {		LinearLayout clickFirst;		LinearLayout clickSecond;		LinearLayout clickThird;		AlertDialog.Builder builder = new Builder(				SettingOtherPersonInfoActivity.this, R.style.dialog);		View view = View.inflate(SettingOtherPersonInfoActivity.this,				R.layout.il_singlechoice_setaffectivestate, null);		ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(				ViewGroup.LayoutParams.MATCH_PARENT,				ViewGroup.LayoutParams.MATCH_PARENT);		view.setLayoutParams(params);		clickFirst = (LinearLayout) view				.findViewById(R.id.il_setaffectivedialog_first);		clickSecond = (LinearLayout) view				.findViewById(R.id.il_setaffectivedialog_second);		clickThird = (LinearLayout) view				.findViewById(R.id.il_setaffectivedialog_third);		builder.setView(view);		dialog = builder.show();		dialog.setView(view, 0, 0, 0, 0);		clickFirst.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				affectiveText.setText("单身");				dialog.dismiss();			}		});		clickSecond.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				affectiveText.setText("热恋ing");				dialog.dismiss();			}		});		clickThird.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				affectiveText.setText("刚分手");				dialog.dismiss();			}		});	}	/**	 * 判断是哪个Activity返回的值 并做相应处理	 */	@Override	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		// TODO Auto-generated method stub		super.onActivityResult(requestCode, resultCode, data);		switch (resultCode) {		case BIRTHDAY_RESULTCODE:			birthdayText.setText(data.getStringExtra("birthday"));			constellationText.setText(data.getStringExtra("constellation"));			break;		case HEIGHT_RESULTCODE:			heightText.setText(data.getStringExtra("height"));			break;		case SIGNATURE_RESULTCODE:			signatureText.setText(data.getStringExtra("signature"));			break;		case SCHOOL_RESULTCODE:			break;		case DEPARTMENT_RESULTCODE:			departmentText.setText(data.getStringExtra("department"));			break;		case HOME_RESULTCODE:			homeText.setText(data.getStringExtra("home"));			break;		default:			break;		}	}	private void getUploadData() {		name = nameText.getText().toString();		sex = sexText.getText().toString();		birthday = birthdayText.getText().toString();		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");		try {			birthdayDate = sdf.parse(birthday);		} catch (ParseException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		System.out.println("birthday+++++++++++++++++++++++" + birthdayDate				+ "_________________");		constellation = constellationText.getText().toString();		height = heightText.getText().toString().replaceAll("cm", "");		heightInt = Integer.valueOf(height);		signature = signatureText.getText().toString();		userID = Integer.parseInt(userIDText.getText() + "");		school = schoolText.getText().toString();		department = departmentText.getText().toString();		home = homeText.getText().toString();		affective = affectiveText.getText().toString();	}	private void requestService() {		getUploadData();		if (sexText.getText() != "" && sexText.getText() != null) {			UserInformationBean userInformationBean = new UserInformationBean();			userInformationBean.setUUID(currentUser.getUuid());			userInformationBean.setUser_nickname(name);			userInformationBean.setUser_sex(sex);			userInformationBean.setUser_birthday(birthdayDate);			userInformationBean.setUser_star(constellation);			userInformationBean.setUser_height(heightInt);			userInformationBean.setUser_sign(signature);			userInformationBean.setUser_school(school);			userInformationBean.setUser_department(department);			userInformationBean.setUser_locality(home);			userInformationBean.setUser_state(affective);			userInformationBean.setUser_icon(headUrl);			if (userInformationBean != null) {				NUpDateUserInfo nUpDateUserInfo = new NUpDateUserInfo(						mActivity, new HttpResponseHandler());				nUpDateUserInfo.UpDateUserInfo(userInformationBean);			} else {			}		} else {			Toast.makeText(mActivity, "保存失败，请查看是否完整填写资料或者网络是否正常", 1).show();		}	}}
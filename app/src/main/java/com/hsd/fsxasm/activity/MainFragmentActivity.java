package com.hsd.fsxasm.activity;import java.io.File;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Timer;import java.util.TimerTask;import org.xutils.x;import org.xutils.common.Callback.CancelledException;import org.xutils.common.task.AbsTask;import org.xutils.http.HttpMethod;import org.xutils.view.annotation.ViewInject;import android.app.AlertDialog;import android.app.AlertDialog.Builder;import android.app.Dialog;import android.content.Context;import android.content.DialogInterface;import android.content.DialogInterface.OnClickListener;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.PackageManager.NameNotFoundException;import android.net.Uri;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentTransaction;import android.util.Log;import android.view.View;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.RadioGroup.OnCheckedChangeListener;import android.widget.Toast;import com.alibaba.fastjson.JSONObject;import com.hsd.fsxasm.R;import com.hsd.fsxasm.base.BaseFragment;import com.hsd.fsxasm.base.BaseFragmentActivity;import com.hsd.fsxasm.chat.DemoHelper;import com.hsd.fsxasm.chat.Jstx_Chat;import com.hsd.fsxasm.chat.fragment.ChatFragment;import com.hsd.fsxasm.chat.fragment.ConversationListFragment;import com.hsd.fsxasm.chat.manager.PreferenceManager;import com.hsd.fsxasm.domain.FindFriendsBean;import com.hsd.fsxasm.engine.NCheckUpdate;import com.hsd.fsxasm.engine.NFriendCircle;import com.hsd.fsxasm.fragment.FriendCircleFragment;import com.hsd.fsxasm.fragment.HomeFragment;import com.hsd.fsxasm.fragment.MeFragment;import com.hsd.fsxasm.fragment.SeeFragment;import com.hsd.fsxasm.global.Constructs;import com.hsd.fsxasm.global.SharedPreferencesString;import com.hsd.fsxasm.global.TempInfo;import com.hsd.fsxasm.inter.MyProgressCallBack;import com.hsd.fsxasm.utils.LogUtil;import com.hsd.fsxasm.utils.XUtil;import com.hsd.fsxasm.widget.numberprogress.NumberProgressBar;import com.hyphenate.EMCallBack;import com.hyphenate.chat.EMClient;import com.hyphenate.chat.EMOptions;import com.hyphenate.easeui.EaseConstant;import com.hyphenate.easeui.controller.EaseUI;public class MainFragmentActivity extends BaseFragmentActivity implements		OnCheckedChangeListener {	private final int CHECK_UPDATE = 5;	public static Context context;	private final int HEADCHANGED = 1, PERSONINFOCHANGED = 2,			REFRESHFRIENDS = 3, CLOSE = 4;	public List<Fragment> lists;	@ViewInject(R.id.rg_group)	private RadioGroup radioGroup;	@ViewInject(R.id.rb_home)	private RadioButton home;	@Override	protected View initView() {		// TODO Auto-generated method stub		context = getApplicationContext();				NCheckUpdate update = new NCheckUpdate(mActivity, new HttpResponseHandler());		update.check(CHECK_UPDATE);				SharedPreferences sp = getSharedPreferences("init",				Context.MODE_PRIVATE);		String currentPhone = sp.getString(				SharedPreferencesString.CURRENT_USER, "");		if (!currentPhone.equals("")) {			TempInfo.init(this, currentPhone);		}		String toPeople = getIntent().getStringExtra("toPeople");		Bundle bundle = new Bundle();		bundle.putInt("chatType", EaseConstant.CHATTYPE_SINGLE);		bundle.putString(EaseConstant.EXTRA_USER_ID, toPeople);		ConversationListFragment chatFragment = new ConversationListFragment();		chatFragment.setArguments(bundle);		lists = new ArrayList<Fragment>();		lists.add(new HomeFragment());		lists.add(new SeeFragment());		lists.add(chatFragment);		lists.add(new MeFragment());		lists.add(new FriendCircleFragment());		addFragmentToManager();		mRootView = View				.inflate(this, R.layout.il_main_fragment_activity, null);		return mRootView;	}	@Override	protected void updataUI(Object obj) {		// TODO Auto-generated method stub	}	@Override	public void updataUI(Object obj, int responseCode) {		// TODO Auto-generated method stub		LogUtil.info("updateui", "进入updateui方法");		if (responseCode == CHECK_UPDATE) {			Map map = JSONObject.parseObject((String) obj, Map.class);			PackageManager pm = context.getPackageManager();			try {				PackageInfo pi = pm.getPackageInfo(context.getPackageName(), 0);				if(Double.parseDouble(pi.versionName) < Double.parseDouble((String) map.get("new_version"))){					LogUtil.info("updateui", "有新版本需要更新了" + "====" + map.get("message"));					Toast.makeText(mActivity, "有新版本需要更新", Toast.LENGTH_SHORT).show();					openUpdateDialog((String)map.get("url"),(String)map.get("message"));				}else{					LogUtil.info("updateui", "暂时没有新版本需要更新");				}			} catch (NameNotFoundException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}					}	}	@Override	protected void setListener() {		// TODO Auto-generated method stub		home.setChecked(true);		showFragment(lists.get(0));		radioGroup.setOnCheckedChangeListener(this);	}	/**	 * 添加已经建立好的fragment对象到事务中去	 */	private void addFragmentToManager() {		for (int i = 0; i < lists.size(); i++) {			mFragmentManager.beginTransaction()					.add(R.id.id_main_fragment_parents, lists.get(i)).commit();		}	}	@Override	public void onCheckedChanged(RadioGroup group, int checkedId) {		// TODO Auto-generated method stub		switch (checkedId) {		case R.id.rb_home:			System.out.println("home");			showFragment(lists.get(0));			break;		case R.id.rb_see:			System.out.println("rb_see");			showFragment(lists.get(1));			break;		case R.id.rb_chat:			System.out.println("rb_chat");			showFragment(lists.get(2));			// Intent intent = new Intent(mActivity,Jstx_Chat.class);			// startActivity(intent);			break;		case R.id.rb_me:			System.out.println("rb_me");			showFragment(lists.get(3));			break;		default:			break;		}	}	/**	 * 显示对应的fragment	 * 	 * @param fragment	 *            要显示的fragment	 */	public void showFragment(Fragment fragment) {		FragmentTransaction beginTransaction = mFragmentManager				.beginTransaction();		hideFragment(beginTransaction);		beginTransaction.show(fragment);		beginTransaction.commit();	}	/**	 * 隐藏对应的非index的fragment	 * 	 * @param beginTransaction	 *            事务	 */	void hideFragment(FragmentTransaction beginTransaction) {		for (int i = 0; i < lists.size(); i++) {			Fragment baseFragment = lists.get(i);			beginTransaction.hide(baseFragment);		}	}	@Override	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		MeFragment meFragment = (MeFragment) lists.get(3);		HomeFragment homeFragment = (HomeFragment) lists.get(0);		LogUtil.info("MainFragmentActivity", "on activity result resultCode=="				+ resultCode);		switch (resultCode) {		// 更换显示的头像		case HEADCHANGED:			meFragment.headChanged();			break;		// 更改显示的用户信息		case PERSONINFOCHANGED:			meFragment.personInfoChanged();			break;		case REFRESHFRIENDS:			String stringExtra = data.getStringExtra("findFriendsBean");			FindFriendsBean findFriendsBean = JSONObject.parseObject(					stringExtra, FindFriendsBean.class);			homeFragment.refreshFriends(findFriendsBean);			break;		case CLOSE:			startActivity(new Intent(mActivity, FlashActivity.class));			finish();			break;		case Constructs.FRIEND_CIRCLE_FRAGMENT:			flushData(4);			break;		case Constructs.HOME_FRAGMENT:			flushData(0);			break;		case Constructs.MY_FRAGMENT:			flushData(3);			break;		default:			break;		}		super.onActivityResult(requestCode, resultCode, data);	}	@Override	public void onBackPressed() {		finish();	}	@Override	protected void onDestroy() {		// TODO Auto-generated method stub		super.onDestroy();		finish();	}	void flushData(int x) {		LogUtil.info("Mainfragment", "flushData x=" + x);		BaseFragment fragment = (BaseFragment) lists.get(x);		fragment.flushData();	}	private boolean isExit = false;	private AlertDialog.Builder dialog;	private AlertDialog show;	private void exitBy2Click() {		Timer tExit = null;		if (isExit == false) {			isExit = true;			tExit = new Timer();			tExit.schedule(new TimerTask() {				@Override				public void run() {					isExit = false;				}			}, 500);		} else {			System.out.println("退出应用");			System.exit(1);		}	}	public void openUpdateDialog(final String url,String message){		dialog = new AlertDialog.Builder(mActivity);		dialog.setTitle("更新新版本");		dialog.setMessage(message);		dialog.setPositiveButton("立即更新", new OnClickListener() {						@Override			public void onClick(DialogInterface dialog, int which) {								LogUtil.info("onclick", "开始下载文件" + url);				downloadprogressfile(url);							}		});						dialog.setNeutralButton("取消", new OnClickListener() {						@Override			public void onClick(DialogInterface dialog, int which) {				// TODO Auto-generated method stub							}		});				show = dialog.show();					}	private void downloadprogressfile(String url) {        //文件保存在本地的路径		        String filepath="/mnt/sdcard/fsxasm.apk";                       //文件下载        XUtil.DownLoadFile(url, filepath,new MyProgressCallBack<File>(){        	 AlertDialog updateDialog;        	 NumberProgressBar numberprogress;            @Override            public void onSuccess(File result) {                super.onSuccess(result);                installApk(result);            }            @Override            public void onError(Throwable ex, boolean isOnCallback) {                super.onError(ex, isOnCallback);            }            @Override            public void onLoading(long total, long current,                    boolean isDownloading) {            	super.onLoading(total, current, isDownloading);            	numberprogress.setMax(total);                numberprogress.setProgress(current);                LogUtil.info("onStarted", "current" + current + "total" + total);                double t = (double)total;                double c = (double)current;                LogUtil.info("onStarted", "已经下载" + t/c + "%");                if(!isDownloading){                	updateDialog.dismiss();                }            }            			@Override			public void onStarted() {				// TODO Auto-generated method stub								Builder alert = new AlertDialog.Builder(mActivity);                View view = View.inflate(mActivity, R.layout.numberprogress, null);                numberprogress = (NumberProgressBar) view.findViewById(R.id.numberbar);                alert.setView(view);                alert.setTitle("更新新版本");                alert.setNegativeButton("取消更新", new OnClickListener() {										@Override					public void onClick(DialogInterface dialog, int which) {						// TODO Auto-generated method stub						onCancelled(new CancelledException("用户取消更新"));					}				});                                alert.setPositiveButton("后台更新", new OnClickListener() {										@Override					public void onClick(DialogInterface dialog, int which) {						// TODO Auto-generated method stub						updateDialog.dismiss();					}				});                alert.setCancelable(false);                 updateDialog = alert.show();                LogUtil.info("onStarted", "对话框构造完成,已显示");                super.onStarted();			}			@Override			public void onCancelled(CancelledException cex) {				// TODO Auto-generated method stub				super.onCancelled(cex);			}                    });    }			/**     * 安装APK     */    private void installApk(File file) {        Intent intent = new Intent(Intent.ACTION_VIEW);        intent.setDataAndType( Uri.fromFile(file), "application/vnd.android.package-archive");        startActivity(intent);    }	}
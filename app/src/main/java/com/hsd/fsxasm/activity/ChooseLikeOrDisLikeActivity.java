package com.hsd.fsxasm.activity;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import org.xutils.DbManager;import org.xutils.x;import org.xutils.common.Callback.CancelledException;import org.xutils.common.Callback.CommonCallback;import org.xutils.ex.DbException;import android.content.Intent;import android.os.Handler;import android.os.Message;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.alibaba.fastjson.JSONObject;import com.hsd.fsxasm.R;import com.hsd.fsxasm.adapter.SwipeCardAdapter;import com.hsd.fsxasm.adapter.SwipeCardViewAdapter;import com.hsd.fsxasm.base.BaseActivity;import com.hsd.fsxasm.chat.Jstx_Chat;import com.hsd.fsxasm.db.MDbName;import com.hsd.fsxasm.db.MDbUtils;import com.hsd.fsxasm.domain.BaseBean;import com.hsd.fsxasm.domain.UserBean;import com.hsd.fsxasm.domain.UserInformationBean;import com.hsd.fsxasm.engine.NAddHeartBeat;import com.hsd.fsxasm.params.GetUserInfoParams;import com.hsd.fsxasm.utils.LogUtil;import com.hsd.fsxasm.widget.lorentzos.flingswipe.SwipeFlingAdapterView;import com.hsd.fsxasm.widget.lorentzos.flingswipe.SwipeFlingAdapterView.OnItemClickListener;import com.hyphenate.chat.EMClient;import com.hyphenate.exceptions.HyphenateException;public class ChooseLikeOrDisLikeActivity extends BaseActivity{		private SwipeFlingAdapterView personPhoto;	private ImageView dislikeClick;	private ImageView likeClick;	private RelativeLayout leaveMessage;	private TextView nameText;	private ImageView sexImg;	private SwipeFlingAdapterView photoImg;	private TextView ageText;	private TextView heightText;	private TextView schoolText;			private String body;		private List<UserInformationBean> lists;			private List<String> listss;		private int position;	private SwipeCardViewAdapter adapter;		@Override	protected void initData() {		mTitle.setText("邂逅");		mBack.setVisibility(View.VISIBLE);		mHelp.setText("心动");				mHelp.setVisibility(View.VISIBLE);		listss = new ArrayList<String>();		for(int i = position;i<lists.size();i++){			LogUtil.info("url", lists.get(i).getUser_icon());			listss.add(lists.get(i).getUser_icon());		}				adapter = new SwipeCardViewAdapter(mActivity, R.layout.item_like_dislike, R.id.helloText, listss);		System.out.println(lists);		String name = lists.get(position).getUser_nickname();		String shengri = getAge(lists.get(position).getUser_birthday())+"";		String shengao = lists.get(position).getUser_height()+"";		String school = lists.get(position).getUser_school();		if(name==null){			name="sss";		}		if(shengri==null){			shengri="sss";		}		if(shengao==null){			shengao="sss";		}		if(school==null){			school="sss";		}		nameText.setText(name);		ageText.setText(shengri);		heightText.setText(shengao);		schoolText.setText(school);		photoImg.setAdapter(adapter);	}	@Override	protected View initView() {		View parents = View.inflate(mActivity, R.layout.il_recommend_choose_like_friends, null);		personPhoto = (SwipeFlingAdapterView) parents.findViewById(R.id.il_recommend_choose_like_friends_photo);		dislikeClick = (ImageView) parents.findViewById(R.id.il_recommend_choose_like_friends_dislike);		likeClick = (ImageView) parents.findViewById(R.id.il_recommend_choose_like_friends_like);		leaveMessage = (RelativeLayout) parents.findViewById(R.id.il_recommend_choose_like_friends_message);		nameText = (TextView) parents.findViewById(R.id.it_recommend_choose_like_friends_name);		ageText = (TextView) parents.findViewById(R.id.it_recommend_choose_like_friends_age);		schoolText = (TextView) parents.findViewById(R.id.it_recommend_choose_like_friends_school);		heightText = (TextView) parents.findViewById(R.id.it_recommend_choose_like_friends_height);				photoImg = (SwipeFlingAdapterView) parents.findViewById(R.id.il_recommend_choose_like_friends_photo);		body = getIntent().getStringExtra("body");		LogUtil.info("ChooseLikeOrDisLikeActivity", body);		position = getIntent().getIntExtra("position", 0)-1;		lists = JSONObject.parseArray(body,UserInformationBean.class);		return parents;	}	@Override	protected void updataUI(Object obj) {		// TODO Auto-generated method stub		BaseBean result = (BaseBean) obj;		if(result!=null){			if(result.getResultCode()==1){				Toast.makeText(mActivity, "心动成功", Toast.LENGTH_SHORT).show();			}else{				Toast.makeText(mActivity, result.getDescribe(), Toast.LENGTH_SHORT).show();			}		}	}	@Override	protected void setListener() {		// TODO Auto-generated method stub				mHelp.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				Intent intent = new Intent(mActivity, HeartBeatListActivity.class);            	startActivity(intent);			}		});										personPhoto.setOnItemClickListener(new SwipeFlingAdapterView.OnItemClickListener() {            @Override            public void onItemClicked(int itemPosition, Object dataObject) {            	Intent intent = new Intent(mActivity, FriendsPersonInfoActivity.class);            	intent.putExtra("userinfomation", JSONObject.toJSONString(lists.get(position)));            	startActivity(intent);            }        });				dislikeClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				//PromptManager.showToast(context, "不心动");			}		});		likeClick.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				//PromptManager.showToast(context, "心动");				NAddHeartBeat addHeartBeat = new NAddHeartBeat(mActivity, new HttpResponseHandler());				addHeartBeat.addHeartBeat(lists.get(position).getUserInformation_ID());			}		});		leaveMessage.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				//PromptManager.showToast(mActivity, "留言");				//MiddleManager.newInstance().changeUI(LikeFriendsList.class);								saveUserInfo(lists.get(position).getUserInformation_ID() + "");											}		});						personPhoto.setFlingListener(new SwipeFlingAdapterView.onFlingListener() {            private String removeurl;			@Override            public void removeFirstObjectInAdapter() {                // this is the simplest way to delete an object from the Adapter (/AdapterView)                Log.d("LIST", "removed object!");                removeurl = listss.remove(0);                //position++;                if(position>=lists.size()){                	return;                }                setData();                adapter.notifyDataSetChanged();            }			@Override            public void onLeftCardExit(Object dataObject) {                //Do something on the left!                //You also have access to the original object.                //If you want to use it just cast it (String) dataObject              position++;              //Toast.makeText(mActivity, "", duration)            }            @Override            public void onRightCardExit(Object dataObject) {            	position++;            	NAddHeartBeat addHeartBeat = new NAddHeartBeat(mActivity, new HttpResponseHandler());				addHeartBeat.addHeartBeat(lists.get(position).getUserInformation_ID());            	//Toast.makeText(mActivity, "心动成功", 0).show();            }            private int findIndex(String removeurl2) {				// TODO Auto-generated method stub            	for(int i = 0;i<lists.size();i++){            		if(lists.get(i).getUser_icon().equals(removeurl2)){            			return i;            		}            	}            					return -1;			}			@Override            public void onAdapterAboutToEmpty(int itemsInAdapter) {								                Log.d("LIST", "notified");            }            @Override            public void onScroll(float scrollProgressPercent) {                View view = personPhoto.getSelectedView();                view.findViewById(R.id.item_swipe_right_indicator).setAlpha(scrollProgressPercent < 0 ? -scrollProgressPercent : 0);                view.findViewById(R.id.item_swipe_left_indicator).setAlpha(scrollProgressPercent > 0 ? scrollProgressPercent : 0);            }        });						mBack.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				finish();			}		});			}		/**	 * 根据日期算年龄	 * 	 * @param user_birthday	 * @return	 */	private int getAge(Date user_birthday) {		int age = 0;		Calendar born = Calendar.getInstance();		Calendar now = Calendar.getInstance();		if (user_birthday != null) {			now.setTime(new Date());			born.setTime(user_birthday);			if (born.after(now)) {				throw new IllegalArgumentException(						"Can't be born in the future");			}			age = now.get(Calendar.YEAR) - born.get(Calendar.YEAR);			if (now.get(Calendar.DAY_OF_YEAR) < born.get(Calendar.DAY_OF_YEAR)) {				age -= 1;			}		}		return age;	}			public void setData() {							String name = lists.get(position).getUser_nickname();		String shengri = getAge(lists.get(position).getUser_birthday())+"";		String shengao = lists.get(position).getUser_height()+"";		String school = lists.get(position).getUser_school();		if(name==null){			name="sss";		}		if(shengri==null){			shengri="sss";		}		if(shengao==null){			shengao="sss";		}		if(school==null){			school="sss";		}		nameText.setText(name);		ageText.setText(shengri);		heightText.setText(shengao);		schoolText.setText(school);	}	 private DbManager db = null;	 	private void saveUserInfo(final String username){		MDbName findFirst = null;		db = x.getDb(MDbUtils.daoConfig);		try {			findFirst = db.selector(MDbName.class).where("user_id", "=", username).findFirst();		} catch (DbException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();		}		if(findFirst != null){			return;		}else{			System.out.println("获取网络数据开始--------");						GetUserInfoParams params = new GetUserInfoParams(Integer.parseInt(username));			x.http().post(params, new CommonCallback<String>() {				@Override				public void onSuccess(String result) {					// TODO Auto-generated method stub					System.out.println(result);					System.out.println("==================获取数据成功");					UserInformationBean bean = JSONObject.parseObject(result, UserInformationBean.class);					//user.setNick("10086");					//user.setAvatar("http://img0.imgtn.bdimg.com/it/u=1934167097,2725626347&fm=21&gp=0.jpg");					MDbName mDbName = new MDbName();					mDbName.setUser_id(username+"");					mDbName.setUsername(bean.getUser_nickname());					mDbName.setPic(bean.getUser_icon());					try {						db.save(mDbName);						System.out.println("保存用户数据到本地成功");					} catch (DbException e) {						// TODO Auto-generated catch block						e.printStackTrace();						LogUtil.info("数据库存储", "数据库存储发生了异常");					}														}				@Override				public void onError(Throwable ex, boolean isOnCallback) {					// TODO Auto-generated method stub					Toast.makeText(mActivity, "网络错误,请重试", Toast.LENGTH_SHORT).show();				}				@Override				public void onCancelled(CancelledException cex) {					// TODO Auto-generated method stub									}				@Override				public void onFinished() {					// TODO Auto-generated method stub										Intent intent = new Intent(mActivity,Jstx_Chat.class);					intent.putExtra("isChat", true);					intent.putExtra("toPeople", username);					startActivity(intent);														}			});  							}			}}